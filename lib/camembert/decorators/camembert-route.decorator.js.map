{"version":3,"file":"camembert-route.decorator.js","sourceRoot":"","sources":["../../../src/lib/decorators/camembert-route.decorator.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAEb,QAAA,iBAAiB,GAAG,MAAM,CAAC,mBAAmB,CAAC,CAAC;AAW7D;;;;;;;;;;;GAWG;AACH,wBAA+B,UAAkB,EAAE,IAAa,EAAE,gBAA2C,EAAE,eAA0C;IACvJ,MAAM,CAAC,UAAU,MAAc,EAAE,WAAmB;QAElD,IAAI,KAAK,GAAyB;YAChC,UAAU,EAAE,MAAM;YAClB,IAAI,EAAE,IAAI,IAAI,EAAE;YAChB,UAAU,EAAE,UAAU,CAAC,iBAAiB,EAAE;YAC1C,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC;YAC3B,gBAAgB,EAAE,gBAAgB,IAAI,EAAE;YACxC,eAAe,EAAE,eAAe,IAAI,EAAE;SACvC,CAAC;QAEF,OAAO,CAAC,cAAc,CAAC,yBAAiB,EAAE,KAAK,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;IACxE,CAAC,CAAA;AACH,CAAC;AAdD,wCAcC","sourcesContent":["import \"reflect-metadata\";\n\nexport const CamembertRouteKey = Symbol('CamembertRouteKey');\n\nexport interface CamembertRouteConfig {\n  controller: Object;\n  path: string;\n  httpMethod: string;\n  action: Function;\n  beforeMiddleware: Function[];\n  afterMiddleware: Function[];\n}\n\n/**\n * Camembert route decorator\n *\n * Register a new HTTP route\n *\n * @param httpMethod the http method i.e.: GET, POST, DELETE...\n * @param path The route path i.e.: /login\n * @param beforeMiddleware an array of middleware to execute before the method we are decorating\n * @param afterMiddleware an array of middleware to execute before the method we are decorating\n * @returns {(target:Object, propertyKey:string)=>undefined}\n * @constructor\n */\nexport function CamembertRoute(httpMethod: string, path?: string, beforeMiddleware?: [(req, res, next)=>void], afterMiddleware?: [(req, res, next)=>void]) {\n  return function (target: Object, propertyKey: string) {\n\n    let route: CamembertRouteConfig = {\n      controller: target,\n      path: path || '',\n      httpMethod: httpMethod.toLocaleLowerCase(),\n      action: target[propertyKey],\n      beforeMiddleware: beforeMiddleware || [],\n      afterMiddleware: afterMiddleware || [],\n    };\n\n    Reflect.defineMetadata(CamembertRouteKey, route, target[propertyKey]);\n  }\n}\n"]}