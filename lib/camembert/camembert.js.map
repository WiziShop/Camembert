{"version":3,"file":"camembert.js","sourceRoot":"","sources":["../../src/lib/camembert.ts"],"names":[],"mappings":"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","sourcesContent":["import \"reflect-metadata\";\nimport {Container} from \"inversify\";\nimport * as express from \"express\";\nimport * as http from 'http';\nimport {\n  CamembertInjectable,\n  CamembertInjectableMetadataKey\n} from \"./decorators/camembert-injectable.decorator\";\n\n\nimport G = require(\"glob\");\n\nimport {CamembertEnvironment} from \"./interfaces/camembert-environment.interface\";\nimport {CamembertControllerMetadataKey, CamembertController} from \"./decorators/camembert-controller.decorator\";\nimport {CamembertRouteConfig, CamembertRouteKey} from \"./decorators/camembert-route.decorator\";\nimport {CamembertRouteMiddleware} from \"./middlewares/camembert-route.middleware\";\nimport {CamembertFormKey} from \"./decorators/camembert-form.decorator\";\n\n\nexport interface CamembertRouting {\n  path: string;\n  httpMethod: string;\n  middleware: Function[];\n}\n\n\nexport interface CamembertRouteRouteParameter {\n  name: string;\n  type: any;\n}\n\nexport class CamembertContainer extends Container {\n\n}\n\n/**\n * The Camembert core class\n */\nexport class Camembert {\n  private started = false;\n\n  private routes: CamembertRouting[] = [];\n\n  private container: CamembertContainer;\n\n  private app: express.Application;\n\n  private routeConfigs: CamembertRouteConfig[] = [];\n\n  /**\n   *\n   * @param environment\n   * @param run\n   */\n  private constructor(private environment: CamembertEnvironment,\n                      run?: (app: express.Application, routes: CamembertRouting[], container: CamembertContainer)=>void) {\n\n    this.importControllers();\n\n    this.setContainer();\n\n    this.setRouting();\n\n    this.app = express();\n\n    if (run && typeof run === 'function') {\n      run(this.app, this.routes, this.container);\n    }\n\n  }\n\n  /**\n   * Configure Camembert before start the serve\n   *\n   * @param environment The Camembert's configuration\n   * @param run Function which will be executed to allow you to configure the app the way you want before start the server\n   * @returns {Camembert}\n   */\n  static configure(environment: CamembertEnvironment,\n                   run?: (app: express.Application, routes: CamembertRouting[], container: CamembertContainer)=>void): Camembert {\n\n    return new this(environment, run);\n  }\n\n  /**\n   * Start the server\n   *\n   * @param onListening Function to execute on the \"listening\" HTTP server event. If none a default function will be executed\n   * @param onError Function to execute on the \"error\" HTTP server event. If none a default function will be executed\n   */\n  start(onListening?: (server: http.Server)=>void, onError?: (server: http.Server, error: any)=>void) {\n    if (this.started) {\n      throw 'Server already started';\n    }\n\n    let server = http.createServer(this.app);\n\n    server.listen(this.environment.port);\n\n    this.started = true;\n\n    server.on('listening', () => {\n      if (onListening && typeof onListening === 'function') {\n        onListening(server);\n      } else {\n        this.onListening(server);\n      }\n\n      this.dumpRoutes(this.app);\n    });\n\n    server.on('error', (error) => {\n      if (onError && typeof onError === 'function') {\n        onError(server, error);\n      } else {\n        this.onError(error);\n      }\n    });\n  }\n\n  /**\n   * Import the controllers to the app\n   */\n  private importControllers() {\n\n    this.environment.controllersPath.forEach(controllerPath => {\n      G.sync(controllerPath).forEach(file => {\n        if (file.split('.').pop() === 'js') {\n          require(file);\n        }\n      })\n    });\n  }\n\n\n  /**\n   * Create the DI container\n   *\n   */\n  private setContainer() {\n    this.container = new CamembertContainer();\n\n    this.container.bind(CamembertContainer).toConstantValue(this.container);\n\n    let targets = Reflect.getMetadata(CamembertInjectableMetadataKey, CamembertInjectable);\n    targets.forEach(target => {\n      this.container.bind(target).toSelf().inSingletonScope();\n    });\n  }\n\n  /**\n   * Set routing\n   */\n  private setRouting() {\n    let controllers = Reflect.getMetadata(CamembertControllerMetadataKey, CamembertController);\n\n    controllers.forEach(controller => {\n\n      this.extractRoutesFromCamembertController(controller);\n    });\n  }\n\n\n  /**\n   * Retrieve all routes for a controller and populate the routes array\n   *\n   * @param controller\n   */\n  private extractRoutesFromCamembertController(controller: Function) {\n\n\n    for (let actionName of Object.getOwnPropertyNames(controller.prototype)) {\n      let action = controller.prototype[actionName];\n\n      if (typeof action !== 'function') {\n        continue;\n      }\n\n      let route: CamembertRouteConfig = Reflect.getMetadata(CamembertRouteKey, action);\n\n      if (!route) {\n        continue;\n      }\n\n      route.path = (Reflect.getMetadata(CamembertControllerMetadataKey, controller) || \"\") + route.path;\n\n      this.routeConfigs.push(route);\n\n      let controllerInstance = this.container.get(route.controller.constructor);\n\n      let routeParams = CamembertUtils.getRouteParameters(controllerInstance, route.action);\n\n\n      let middleware: Function[] = route.beforeMiddleware ? route.beforeMiddleware : [];\n\n      for (let routerParam of routeParams) {\n        if (typeof routerParam.type === 'function') {\n\n          let formValidator = Reflect.getMetadata(CamembertFormKey, routerParam.type);\n\n          if (formValidator) {\n\n            middleware.push((req, res, next) => {\n\n              let formInst = new routerParam.type();\n\n              for (let property of Object.keys(formInst)) {\n                if (req.body.hasOwnProperty(property)) {\n                  formInst[property] = req.body[property];\n                }\n              }\n              formValidator(req, res, next, formInst);\n            });\n          }\n        }\n      }\n\n\n      middleware.push(CamembertRouteMiddleware(controllerInstance, route.action, routeParams));\n\n      route.afterMiddleware.forEach(m => {\n        middleware.push(m);\n      });\n\n      this.routes.push(\n        {\n          path: route.path,\n          httpMethod: route.httpMethod,\n          middleware: middleware,\n        }\n      );\n    }\n  }\n\n  /**\n   * Event listener for HTTP server \"error\" event\n   *\n   * @param error\n   */\n  private onError(error: any) {\n    if (error.syscall !== 'listen') {\n      throw error;\n    }\n\n    switch (error.code) {\n      case 'EACCES':\n        console.error(`Port ${this.environment.port} requires elevated privileges`);\n        process.exit(1);\n        break;\n      case 'EADDRINUSE':\n        console.error(`Port ${this.environment.port} is already in use`);\n        process.exit(1);\n        break;\n      default:\n        throw error;\n    }\n  }\n\n  /**\n   * Event listener for HTTP server \"listening\" event.\n   */\n  private onListening(server: http.Server) {\n\n    let addr = server.address();\n\n    let bind = typeof addr === 'string'\n      ? 'pipe ' + addr\n      : 'port ' + addr.port;\n\n    console.log('Server started on ' + bind);\n  }\n\n\n  /**\n   * Dump the routes into the console\n   *\n   * @param app\n   */\n  private dumpRoutes(app: express.Application) {\n    let ignoredRoutes = ['query', 'expressInit'];\n\n    if(this.environment.verbose !== false) {\n      console.log(`------ ROUTES ------`);\n    }\n    app._router.stack.forEach(entry => {\n\n      if (entry.route) {\n        let route = entry.route;\n        Object.keys(route.methods)\n          .filter((method) => {\n            return !!route.methods[method]\n          })\n          .map((method) => {\n            let r = method.toUpperCase() + ' ' + route.path;\n\n            this.routeConfigs.forEach((route: CamembertRouteConfig) => {\n              let paramNames: string[] = [];\n              let controllerInstance = this.container.get(route.controller.constructor);\n              let routeParams = CamembertUtils.getRouteParameters(controllerInstance, route.action);\n              for (let param of routeParams) {\n                paramNames.push(param.name + ':' + param.type.name);\n              }\n\n\n              if (r === route.httpMethod.toUpperCase() + ' ' + route.path) {\n                r += ' → ' + route.controller.constructor.name + '::' + route.action.name + '(' + paramNames.join(', ') + ')';\n              }\n            });\n\n            if(this.environment.verbose !== false) {\n              console.log(r);\n            }\n          })\n      }\n    });\n\n    if(this.environment.verbose !== false) {\n      console.log(`------ ${this.routeConfigs.length} routes found ------`);\n    }\n  }\n\n}\n\n\n/**\n * CamembertUtils class\n */\nexport class CamembertUtils {\n\n  /**\n   * Retrieve route parameters\n   *\n   * @param ControllerInstance\n   * @param method\n   * @returns {CamembertRouteRouteParameter[]}\n   */\n  static getRouteParameters(ControllerInstance, method): CamembertRouteRouteParameter[] {\n\n    let routeParams: CamembertRouteRouteParameter[] = [];\n\n    let STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n    let ARGUMENT_NAMES = /([^\\s,]+)/g;\n\n    function getParamNames(func) {\n      let fnStr = func.toString().replace(STRIP_COMMENTS, '');\n      let result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n      if (result === null)\n        result = [];\n      return result;\n    }\n\n    let parameters = getParamNames(method);\n    let parameterTypes = Reflect.getMetadata('design:paramtypes', ControllerInstance, method.name);\n\n    parameters.forEach((parameter, i) => {\n      if (parameterTypes.hasOwnProperty(i)) {\n        routeParams.push({\n          name: parameter,\n          type: parameterTypes[i]\n        });\n      }\n    });\n\n\n    return routeParams;\n  }\n}\n"]}