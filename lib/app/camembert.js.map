{"version":3,"file":"camembert.js","sourceRoot":"","sources":["../../src/app/camembert.ts"],"names":[],"mappings":"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","sourcesContent":["import \"reflect-metadata\";\nimport {Container} from \"inversify\";\nimport * as express from \"express\";\nimport * as http from 'http';\nimport {\n  CamembertInjectable,\n  CamembertInjectableMetadataKey\n} from \"./decorators/camembert-injectable.decorator\";\n\n\nimport G = require(\"glob\");\n\nimport {Environment} from \"./environment.interface\";\nimport {CamembertControllerMetadataKey, CamembertController} from \"./decorators/camembert-controller.decorator\";\nimport {CamembertRouteConfig} from \"./decorators/camembert-route.decorator\";\n\nexport interface CamembertRoute {\n  controllerInstance: Function;\n  path: string;\n  httpMethod: string;\n  middleware: Function;\n  data: any;\n}\n\n\nexport interface CamembertRouteRouteParameter {\n  name: string;\n  type: any;\n}\n\n\nexport class Camembert {\n  private started = false;\n\n  private routes: CamembertRoute[] = [];\n\n  private container: Container;\n\n  private app: express.Application;\n\n  private constructor(private environment: Environment,\n                      run?: (app: express.Application, routes: CamembertRoute[], container: Container)=>void) {\n\n    this.importControllers();\n\n    this.setContainer();\n\n    this.setRouting();\n\n    this.app = express();\n\n    if (run && typeof run === 'function') {\n      run(this.app, this.routes, this.container);\n    }\n\n  }\n\n  static configure(environment: Environment,\n                   run?: (app: express.Application, routes: CamembertRoute[], container: Container)=>void): Camembert {\n\n    return new this(environment, run);\n  }\n\n  start(onListening?: (server: http.Server)=>void, onError?: (server: http.Server, error: any)=>void) {\n    if (this.started) {\n      throw 'Server already started';\n    }\n\n    let server = http.createServer(this.app);\n\n    server.listen(this.environment.port);\n\n    this.started = true;\n\n    server.on('listening', () => {\n      if (onListening && typeof onListening === 'function') {\n        onListening(server);\n      } else {\n        this.onListening(server);\n      }\n\n      this.dumpRoutes(this.app);\n    });\n\n    server.on('error', (error) => {\n      if (onError && typeof onError === 'function') {\n        onError(server, error);\n      } else {\n        this.onError(error);\n      }\n    });\n  }\n\n  private importControllers() {\n\n    this.environment.controllersPath.forEach(controllerPath => {\n      G.sync(controllerPath).forEach(file => {\n        if (file.split('.').pop() === 'js') {\n          require(file);\n        }\n      })\n    });\n  }\n\n\n  private setContainer() {\n    this.container = new Container();\n\n    this.container.bind(this.container.constructor).toSelf().inSingletonScope();\n\n    let targets = Reflect.getMetadata(CamembertInjectableMetadataKey, CamembertInjectable);\n    targets.forEach(target => {\n      this.container.bind(target).toSelf().inSingletonScope();\n    });\n  }\n\n\n  private setRouting() {\n    let controllers = Reflect.getMetadata(CamembertControllerMetadataKey, CamembertController);\n\n    controllers.forEach(controller => {\n\n      this.extractRoutesFromCamembertController(controller);\n    });\n  }\n\n  private extractRoutesFromCamembertController(controller: Function) {\n\n    for (let actionName of Object.getOwnPropertyNames(controller.prototype)) {\n      let action = controller.prototype[actionName];\n\n      if (typeof action !== 'function' || !Reflect.hasMetadata('routes', action)) {\n        continue;\n      }\n\n      let routes = Reflect.getMetadata('routes', action);\n\n      routes.forEach((route: CamembertRouteConfig) => {\n\n        let camembertRoute: CamembertRoute = {\n          controllerInstance: this.container.get(route.controller.constructor),\n          path: (Reflect.getMetadata(CamembertControllerMetadataKey, controller) || \"\") + route.path,\n          httpMethod: route.httpMethod,\n          middleware: route.middleware,\n          data: route.data,\n        };\n\n\n        this.routes.push(camembertRoute);\n\n      });\n    }\n  }\n\n\n  private onError(error: any) {\n    if (error.syscall !== 'listen') {\n      throw error;\n    }\n\n    // handle specific listen errors with friendly messages\n    switch (error.code) {\n      case 'EACCES':\n        console.error(`Port ${this.environment.port} requires elevated privileges`);\n        process.exit(1);\n        break;\n      case 'EADDRINUSE':\n        console.error(`Port ${this.environment.port} is already in use`);\n        process.exit(1);\n        break;\n      default:\n        throw error;\n    }\n  }\n\n  /**\n   * Event listener for HTTP server \"listening\" event.\n   */\n  private onListening(server: http.Server) {\n\n    let addr = server.address();\n\n    let bind = typeof addr === 'string'\n      ? 'pipe ' + addr\n      : 'port ' + addr.port;\n\n    console.log('Server started on ' + bind);\n  }\n\n\n  private dumpRoutes(app) {\n    let ignoredRoutes = ['query', 'expressInit'];\n\n    console.log('------ ROUTES ------');\n    app._router.stack.forEach(entry => {\n\n      if (entry.route) {\n        let route = entry.route;\n        Object.keys(route.methods)\n          .filter((method) => {\n            return !!route.methods[method]\n          })\n          .map((method) => {\n            let r = method.toUpperCase() + ' ' + route.path;\n\n\n            this.routes.forEach((route: CamembertRoute) => {\n              let paramNames: string[] = [];\n              let routeParams = CamembertUtils.getRouteParameters(route);\n              for (let param of routeParams) {\n                paramNames.push(param.name + ':' + param.type.name);\n              }\n              if (r === route.httpMethod.toUpperCase() + ' ' + route.path) {\n                r += ' → ' + route.controllerInstance.constructor.name + '::' + route.middleware.name + '(' + paramNames.join(', ') + ')';\n              }\n            });\n\n            console.log(r);\n          })\n      }\n    });\n  }\n\n}\n\n\nexport class CamembertUtils {\n\n  static getRouteParameters(route: CamembertRoute): CamembertRouteRouteParameter[] {\n\n    let routeParams: CamembertRouteRouteParameter[] = [];\n\n    let STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n    let ARGUMENT_NAMES = /([^\\s,]+)/g;\n\n    function getParamNames(func) {\n      let fnStr = func.toString().replace(STRIP_COMMENTS, '');\n      let result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n      if (result === null)\n        result = [];\n      return result;\n    }\n\n    let parameters = getParamNames(route.middleware);\n    let parameterTypes = Reflect.getMetadata('design:paramtypes', route.controllerInstance, route.middleware.name);\n\n    parameters.forEach((parameter, i) => {\n      if (parameterTypes.hasOwnProperty(i)) {\n        routeParams.push({\n          name: parameter,\n          type: parameterTypes[i]\n        });\n      }\n    });\n\n\n    return routeParams;\n  }\n}\n"]}